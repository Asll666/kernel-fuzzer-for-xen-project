name: "CodeQL"

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 13 * * 6'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        language: ['cpp']
        os:
          - 'ubuntu-20.04'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install -y build-essential autoconf automake autoconf-archive libjson-c-dev libglib2.0-dev flex bison libtool cmake

      - name: Setup ld
        run: |
          echo "$PWD/install/lib" | sudo tee -a /etc/ld.so.conf.d/kfx.conf
          echo "/usr/local/lib" | sudo tee -a /etc/ld.so.conf.d/xen.conf

      - name: Install capstone
        run: |
          export INSTALLDIR="$PWD/install"
          git submodule update --init capstone
          mkdir -p capstone/build
          cd capstone/build
          cmake ..
          make -j2
          sudo make install
          sudo ldconfig
          cd ../..

      - name: Get Xen hash
        id: xenhash
        run: |
          git submodule update --init xen
          cd xen
          hash=$(git describe --always)
          echo ::set-output name=hash::$hash

      - uses: actions/cache@v2
        id: xen-cache
        with:
          path: ~/saved-xen
          key: ${{ steps.xenhash.outputs.hash }}

      - name: Compile Xen
        run: |
          mkdir -p ~/saved-xen
          cp ~/saved-xen/* ~
          debs=$(ls -la ~/saved-xen | grep deb | wc -l)
          if [ $debs -eq 0 ]; then
            sudo apt-get install -y libfdt-dev libpixman-1-dev libssl-dev libsdl-dev tightvncserver x11vnc uuid-runtime uuid-d$
            sudo apt-get install -y libc6-dev wget bcc bin86 gawk libpixman-1-dev libaio-dev libfdt-dev nasm
            sudo apt-get install -y libfuse-dev liblzma-dev libsystemd-dev gettext libyajl-dev iasl libbz2-dev e2fslibs-dev oc$
            sudo apt-get install -y texinfo texlive-latex-base texlive-latex-recommended texlive-fonts-extra texlive-fonts-rec$
            sudo apt-get install -y markdown pandoc transfig tgif fig2dev
            sudo ln -s /usr/include/x86_64-linux-gnu/pci /usr/include/pci
            cd xen
            echo CONFIG_EXPERT=y > xen/.config
            echo CONFIG_MEM_SHARING=y >> xen/.config
            ./configure --disable-pvshim --enable-ovmf
            make -C xen olddefconfig
            make -j2 debball
            mv dist/*.deb ~
            cd ..
          fi

      - name: Install Xen
        run: sudo dpkg -i ~/*.deb

      - name: Compile and install LibVMI
        run: |
          git submodule update --init libvmi
          cd libvmi
          autoreconf -vif
          ./configure --disable-kvm --disable-file --disable-bareflank --disable-examples --disable-vmifs
          make -j2
          sudo make install
          sudo ldconfig
          cd ..

      - name: Compile kfx
        run: |
          git submodule update --init libxdc
          autoreconf -vif
          ./configure
          make -j2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
